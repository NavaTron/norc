name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., v0.1.0)'
        required: true
        type: string

env:
  CARGO_TERM_COLOR: always

jobs:
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
      version: ${{ steps.get_version.outputs.version }}
    steps:
      - name: Get version
        id: get_version
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "version=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
          else
            echo "version=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
          fi

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.get_version.outputs.version }}
          release_name: NORC ${{ steps.get_version.outputs.version }}
          draft: false
          prerelease: false
          body: |
            # NORC ${{ steps.get_version.outputs.version }}
            
            NavaTron Open Real-time Communication Protocol release.
            
            ## Changes
            See [CHANGELOG.md](https://github.com/NavaTron/norc/blob/main/CHANGELOG.md) for details.
            
            ## Downloads
            - Linux (x86_64, aarch64)
            - macOS (x86_64, aarch64/Apple Silicon)
            - Windows (x86_64)
            
            ## Checksums
            SHA256 checksums available in `checksums.txt`

  build-release:
    name: Build - ${{ matrix.target }}
    needs: create-release
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          # Linux
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            archive: tar.gz
            
          - os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            archive: tar.gz
            cross: true
          
          # macOS
          - os: macos-latest
            target: x86_64-apple-darwin
            archive: tar.gz
            
          - os: macos-latest
            target: aarch64-apple-darwin
            archive: tar.gz
          
          # Windows
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            archive: zip

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Install cross-compilation tools
        if: matrix.cross
        run: cargo install cross --git https://github.com/cross-rs/cross

      - name: Build release
        run: |
          if [ "${{ matrix.cross }}" = "true" ]; then
            cross build --release --workspace --target ${{ matrix.target }}
          else
            cargo build --release --workspace --target ${{ matrix.target }}
          fi
        shell: bash

      - name: Create archive (Unix)
        if: matrix.archive == 'tar.gz'
        run: |
          mkdir -p release
          cp target/${{ matrix.target }}/release/norc-server release/
          cp target/${{ matrix.target }}/release/norc-client release/
          cp target/${{ matrix.target }}/release/norc-diag release/
          cp README.md LICENSE release/
          cd release
          tar czf ../norc-${{ needs.create-release.outputs.version }}-${{ matrix.target }}.tar.gz *
          cd ..
          sha256sum norc-${{ needs.create-release.outputs.version }}-${{ matrix.target }}.tar.gz > norc-${{ needs.create-release.outputs.version }}-${{ matrix.target }}.tar.gz.sha256

      - name: Create archive (Windows)
        if: matrix.archive == 'zip'
        shell: pwsh
        run: |
          New-Item -ItemType Directory -Force -Path release
          Copy-Item target/${{ matrix.target }}/release/norc-server.exe release/
          Copy-Item target/${{ matrix.target }}/release/norc-client.exe release/
          Copy-Item target/${{ matrix.target }}/release/norc-diag.exe release/
          Copy-Item README.md, LICENSE release/
          Compress-Archive -Path release/* -DestinationPath norc-${{ needs.create-release.outputs.version }}-${{ matrix.target }}.zip
          (Get-FileHash norc-${{ needs.create-release.outputs.version }}-${{ matrix.target }}.zip -Algorithm SHA256).Hash | Out-File -Encoding ASCII norc-${{ needs.create-release.outputs.version }}-${{ matrix.target }}.zip.sha256

      - name: Upload release archive
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ./norc-${{ needs.create-release.outputs.version }}-${{ matrix.target }}.${{ matrix.archive }}
          asset_name: norc-${{ needs.create-release.outputs.version }}-${{ matrix.target }}.${{ matrix.archive }}
          asset_content_type: application/octet-stream

      - name: Upload checksum
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ./norc-${{ needs.create-release.outputs.version }}-${{ matrix.target }}.${{ matrix.archive }}.sha256
          asset_name: norc-${{ needs.create-release.outputs.version }}-${{ matrix.target }}.${{ matrix.archive }}.sha256
          asset_content_type: text/plain

  publish-crates:
    name: Publish to crates.io
    needs: build-release
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Publish crates
        env:
          CARGO_REGISTRY_TOKEN: ${{ secrets.CARGO_REGISTRY_TOKEN }}
        run: |
          # Publish in dependency order
          cargo publish -p norc-protocol --allow-dirty
          cargo publish -p norc-config --allow-dirty
          cargo publish -p norc-transport --allow-dirty
          cargo publish -p norc-persistence --allow-dirty
          cargo publish -p norc-client-core --allow-dirty
          cargo publish -p norc-server-core --allow-dirty
          cargo publish -p norc-admin-api --allow-dirty
          cargo publish -p norc-cli --allow-dirty
          cargo publish -p norc-tui --allow-dirty

  container-images:
    name: Build Container Images
    needs: create-release
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository }}
          tags: |
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=sha

      - name: Build and push server image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile.server
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}-server
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build and push client image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile.client
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}-client
          cache-from: type=gha
          cache-to: type=gha,mode=max
